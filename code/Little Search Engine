package lse;

import java.io.*;
import java.util.*;

/*#########################################################################################
###        Name: Keshav Subramaniyam
###     RUID: 199001444
###     Email: krs227@scarletmail.rutgers.edu
###     Date: 04/21/2021
###     Version: 6
###     Assignment: Little Search Engine
############################################################################################*/

/**
 * This class builds an index of keywords. Each keyword maps to a set of pages in
 * which it occurs, with frequency of occurrence in each page.
 *
 */

public class LittleSearchEngine {
    
    /**
     * This is a hash table of all keywords. The key is the actual keyword, and the associated value is
     * an array list of all occurrences of the keyword in documents. The array list is maintained in 
     * DESCENDING order of frequencies.
     */
    HashMap<String,ArrayList<Occurrence>> keywordsIndex;
    
    /**
     * The hash set of all noise words.
     */
    HashSet<String> noiseWords;
    
    /**
     * Creates the keyWordsIndex and noiseWords hash tables.
     */
    public LittleSearchEngine() {
        keywordsIndex = new HashMap<String,ArrayList<Occurrence>>(1000,2.0f);
        noiseWords = new HashSet<String>(100,2.0f);
    }
    
    /**
     * Scans a document, and loads all keywords found into a hash table of keyword occurrences
     * in the document. Uses the getKeyWord method to separate keywords from other words.
     * 
     * @param docFile Name of the document file to be scanned and loaded
     * @return Hash table of keywords in the given document, each associated with an Occurrence object
     * @throws FileNotFoundException If the document file is not found on disk
     **/
    public HashMap<String,Occurrence> loadKeywordsFromDocument(String docFile) 
    throws FileNotFoundException {
        
        HashMap<String,Occurrence> docwords = new HashMap<String,Occurrence>();
        Scanner sc = new Scanner(new File(docFile));
        int count = 1;
        while (sc.hasNext()) {
            String word = sc.next();
            String modifiedword = getKeyword(word);
            if( modifiedword != null ) {
                if(!docwords.containsKey(modifiedword)) {
                    Occurrence o1 = new Occurrence(docFile, count);
                    docwords.put(modifiedword, o1);
                } else {
                    docwords.get(modifiedword).frequency++;
                }
            }
        }
        sc.close();

        return docwords;
    }
    
    /**
     * Merges the keywords for a single document into the master keywordsIndex
     * hash table. For each keyword, its Occurrence in the current document
     * must be inserted in the correct place (according to descending order of
     * frequency) in the same keyword's Occurrence list in the master hash table. 
     * This is done by calling the insertLastOccurrence method.
     * 
     * @param kws Keywords hash table for a document
     */
    public void mergeKeywords(HashMap<String,Occurrence> kws) {
        boolean hasPlacedWord = false;

        for(String word: kws.keySet()) {
            ArrayList<Occurrence> occAL = new ArrayList<Occurrence>();
            if( !keywordsIndex.containsKey(word) ) {
                if ( word != null && !word.equals( "" ) ) {
                    occAL.add( kws.get( word ) );
                    keywordsIndex.put( word, occAL );
                    hasPlacedWord = true;
                }
            } else {
                Occurrence o1 = kws.get(word);
                occAL = keywordsIndex.get(word);
                occAL.add( o1 );
                insertLastOccurrence( occAL );
                hasPlacedWord = true;
                keywordsIndex.remove( word );
                keywordsIndex.put( word, occAL );
            }
        }
    }

    /**
     * Given a word, returns it as a keyword if it passes the keyword test,
     * otherwise returns null. A keyword is any word that, after being stripped of any
     * trailing punctuation(s), consists only of alphabetic letters, and is not
     * a noise word. All words are treated in a case-INsensitive manner.
     * 
     * Punctuation characters are the following: '.', ',', '?', ':', ';' and '!'
     * NO OTHER CHARACTER SHOULD COUNT AS PUNCTUATION
     * 
     * If a word has multiple trailing punctuation characters, they must all be stripped
     * So "word!!" will become "word", and "word?!?!" will also become "word"
     * 
     * See assignment description for examples
     * 
     * @param word Candidate word
     * @return Keyword (word without trailing punctuation, LOWER CASE)
     */
    public String getKeyword(String word) {
        String ret = word.toLowerCase();
        String finalString = "";
        boolean inValidFlag = false;
        int k = 0;

        boolean foundPunctuationFlag = false;
        for(int i = 0; i < ret.length(); i++) {
            char ch = ret.charAt(i);
            boolean isPunctuation = ( ch == '.' || ch == ',' || ch == '?' || ch == ':' || ch == ';' ||    ch == '!' );
            if ( ! foundPunctuationFlag ) {
                if ( isPunctuation    ) {
                    foundPunctuationFlag = true;
                     k = i;
                }
            } else {
                if ( ! isPunctuation ) {
                        inValidFlag = true;
                }
            }
        }

        if (inValidFlag) {
            finalString = null;
        } else if ( foundPunctuationFlag) {
            finalString = ret.substring(0, k);
        } else {
            finalString = ret;
        }
        
        if ( finalString != null ) {
            for(int i = 0; i < finalString.length(); i++) {
                char ch = finalString.charAt(i);
                if (ch < 'a' || ch > 'z' ) {  
                    inValidFlag = true;
                }
            }

            if (inValidFlag) {
                finalString = null;
            }
        }

        if( noiseWords.contains(finalString) ) {
            finalString = null;
        }

        return finalString;
    }
/*
    public String getKeyword(String word) {
        String ret = word.toLowerCase();
        String finalString = "";
        boolean inValidFlag = false;
        boolean foundNonAlphaFlag = false;
        int k = 0;

        for(int i = 0; i < ret.length(); i++) {
            char ch = ret.charAt(i);
            //System.out.println(ch);
            if ( foundNonAlphaFlag ) {
                if (ch >= 97 && ch <= 122 ) {
                    inValidFlag = true;
                }
            } else {
                if(ch < 97 || ch > 122) {
                    foundNonAlphaFlag = true;
                     k = i;
                }   
            }
        }

        if (inValidFlag) {
            finalString = null;
        } else if ( foundNonAlphaFlag) {
            finalString = ret.substring(0, k);
        } else {
            finalString = ret;
        }
        
        if( noiseWords.contains(finalString) ) {
            finalString = null;
        }

        return finalString;
    }
*/    
    ArrayList<Integer> bsindices = new ArrayList<Integer>();
    private ArrayList<Integer> midpoint(ArrayList<Occurrence> occs, int key, int lo, int hi) {
        if ( hi < lo)  {
            return bsindices;
        } else  if ( lo == hi ) {
            bsindices.add(lo);
            return bsindices;
        }

        int mid = lo + (hi - lo) / 2;
        int mid_frequency = occs.get(mid).frequency;
        
        bsindices.add(mid);

        if ( key < mid_frequency ) {
            return midpoint(occs,key, mid+1, hi);
        } else if(key > mid_frequency) {
            return midpoint(occs, key, lo, mid-1);
        }

        return bsindices;
    }
    
    private boolean change(int key, ArrayList<Occurrence> occs) {
        boolean hasChange = false;
        key = occs.get(occs.size() - 1).frequency;
        int i = 0;
        while(!hasChange && i < occs.size()) {
            if(key > occs.get(i).frequency) {
                hasChange = true;
            }
            i++;
        }
        return hasChange;
    }

    /**
     * Inserts the last occurrence in the parameter list in the correct position in the
     * list, based on ordering occurrences on descending frequencies. The elements
     * 0..n-2 in the list are already in the correct order. Insertion is done by
     * first finding the correct spot using binary search, then inserting at that spot.
     * 
     * @param occs List of Occurrences
     * @return Sequence of mid point indexes in the input list checked by the binary search process,
     *         null if the size of the input list is 1. This returned array list is only used to test
     *         your code - it is not used elsewhere in the program.
     */
    public ArrayList<Integer> insertLastOccurrence(ArrayList<Occurrence> occs) {
        bsindices = new ArrayList<Integer>();
        ArrayList<Integer> mpa = new ArrayList<Integer>();
        if ( occs.size() <= 1) {
            return null;
        } else {
            int key = occs.get(occs.size() - 1).frequency;
            int lo = 0;
            int hi = occs.size() - 2;
            mpa = midpoint(occs, key, lo, hi);
            boolean changeFlag = change(key, occs);
            if ( mpa.size() == 0) {
                mpa = null;
            } else if(changeFlag) {
                int lastIndexHit = mpa.get(mpa.size() - 1);
                Occurrence occWithKey = occs.get(occs.size() - 1);
                if(occs.get(lastIndexHit).frequency > key) {
                   occs.add(mpa.get(mpa.size() - 2), occWithKey);
                } else {
                   occs.add(lastIndexHit, occWithKey);
                }
                occs.remove(occs.size() - 1);        
            }            
        }
        return mpa;
    }
    
    /**
     * This method indexes all keywords found in all the input documents. When this
     * method is done, the keywordsIndex hash table will be filled with all keywords,
     * each of which is associated with an array list of Occurrence objects, arranged
     * in decreasing frequencies of occurrence.
     * 
     * @param docsFile Name of file that has a list of all the document file names, one name per line
     * @param noiseWordsFile Name of file that has a list of noise words, one noise word per line
     * @throws FileNotFoundException If there is a problem locating any of the input files on disk
     */
    public void makeIndex(String docsFile, String noiseWordsFile) 
    throws FileNotFoundException {
        // load noise words to hash table
        Scanner sc = new Scanner(new File(noiseWordsFile));
        while (sc.hasNext()) {
            String word = sc.next();
            noiseWords.add(word);
        }
        // index all keywords
        sc = new Scanner(new File(docsFile));
        while (sc.hasNext()) {
            String docFile = sc.next();
            HashMap<String,Occurrence> kws = loadKeywordsFromDocument(docFile);
            mergeKeywords(kws);
        }
        sc.close();
    }
    
    /**
     * Search result for "kw1 or kw2". A document is in the result set if kw1 or kw2 occurs in that
     * document. Result set is arranged in descending order of document frequencies. 
     * 
     * Note that a matching document will only appear once in the result. 
     * 
     * Ties in frequency values are broken in favor of the first keyword. 
     * That is, if kw1 is in doc1 with frequency f1, and kw2 is in doc2 also with the same 
     * frequency f1, then doc1 will take precedence over doc2 in the result. 
     * 
     * The result set is limited to 5 entries. If there are no matches at all, result is null.
     * 
     * See assignment description for examples
     * 
     * @param kw1 First keyword
     * @param kw1 Second keyword
     * @return List of documents in which either kw1 or kw2 occurs, arranged in descending order of
     *         frequencies. The result size is limited to 5 documents. If there are no matches, 
     *         returns null or empty array list.
     */

    public ArrayList<String> top5search(String kw1, String kw2) {
        kw1 = kw1.toLowerCase();
        kw2 = kw2.toLowerCase();
        ArrayList<String> finalFiveDocs = new ArrayList<String>();

        if ( keywordsIndex.containsKey(kw1) && keywordsIndex.containsKey(kw2) ) {
            int i = 0;
            int j = 0;
            boolean notComplete = true;
            int iSize = keywordsIndex.get(kw1).size();
            int jSize = keywordsIndex.get(kw2).size();
            int iVal = 0;
            int jVal = 0;
            String doc1 ="";
            String doc2 ="";

            while(  notComplete ) {

                if ( i < iSize ) {
                    iVal = keywordsIndex.get(kw1).get(i).frequency;
                    doc1 = keywordsIndex.get(kw1).get(i).document;
                }
                if ( j < jSize ) {
                    jVal = keywordsIndex.get(kw2).get(j).frequency;
                    doc2 = keywordsIndex.get(kw2).get(j).document;
                }

                if ( ( i < iSize ) && ( iVal >= jVal ) ) {
                    if ( finalFiveDocs.indexOf(doc1) < 0 ) {
                       finalFiveDocs.add(doc1);
                    }
                    i++;
                } else if( (j < jSize ) && ( iVal <= jVal ) ) {
                    if ( finalFiveDocs.indexOf(doc2) < 0 ) {
                        finalFiveDocs.add(doc2);
                    }
                    j++;
                } else {
                    if ( j >= jSize ) {
                        if ( finalFiveDocs.indexOf(doc1) < 0 ) {
                            finalFiveDocs.add(doc1);
                        }
                        i++;
                    }
                    if ( i >= iSize ) {
                        if ( finalFiveDocs.indexOf(doc2) < 0 ) {
                            finalFiveDocs.add(doc2);
                        }
                        j++;
                    }
                }
                
                if ( ( i >= iSize && j >= jSize ) || finalFiveDocs.size() == 5  ) {
                    notComplete = false;
                }
            }
        } else if( keywordsIndex.get(kw1) != null && keywordsIndex.get(kw2) == null ) {
            for(int i = 0; keywordsIndex.get(kw1) != null && i < 5; i++) {
               finalFiveDocs.add(keywordsIndex.get(kw1).get(i).document);
           }
        } else if( keywordsIndex.get(kw1) == null && keywordsIndex.get(kw2) != null ) {
            for(int i = 0; keywordsIndex.get(kw2) != null && i < 5; i++) {
                finalFiveDocs.add(keywordsIndex.get(kw1).get(i).document);
            }
        } else {
            return null;
        }

        return finalFiveDocs;
    }    
}
